name: Scheduled Pipeline

on:
  schedule:
    # Define the cron schedule for every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # This enables manual triggering
  
env:
  # No need to pass as inputs to each action
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}


jobs:
  
  query_tfe_ws:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout addons
        uses: actions/checkout@v3
        with:
          ref: main
          repository: hashi-demo-lab/tfc-workflows-github-addon
          path: addon
      - name: Setup Python
        uses: actions/setup-python@v4.6.0
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: install-python-dep
        run: pip install -r ./addon/requirements.txt

      - name: get-workspace-bytag
        id: get-ws-bytag
        run: |
          PYTHON_OUT=$(python ./addon/get-workspace-bytag.py)
          echo "python_output=$PYTHON_OUT" >> $GITHUB_OUTPUT
      - name: set_output
        id: set_output
        run: |
          echo "Python output: ${{ steps.get-ws-bytag.outputs.python_output }}"
          export WORKSPACE_OUTPUTS=$(echo '${{ steps.get-ws-bytag.outputs.python_output }}' | jq -r '[.data | map(select(.attributes."assessments-enabled" == true)) | .[].id] | tojson')
          echo "workspace_outputs=$WORKSPACE_OUTPUTS" >> $GITHUB_OUTPUT
    outputs: 
        enabled_workspaces: ${{ steps.set_output.outputs.workspace_outputs }}


  apply_drift:
    needs: [query_tfe_ws]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 10
      matrix: 
        workspaces: ${{fromJson(needs.query_tfe_ws.outputs.enabled_workspaces)}} 
    steps:
      - name: checkout-repo
        uses: actions/checkout@v3

      - name: Checkout addons
        uses: actions/checkout@v3
        with:
          ref: main
          repository: hashi-demo-lab/tfc-workflows-github-addon
          path: addon
        
      - name: echo-filename
        run: echo ${{ matrix.workspaces }}

      - name: Setup Python
        uses: actions/setup-python@v4.6.0
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: install-python-dep
        run: pip install -r ./addon/requirements.txt

      - name: get-workspace-byid
        id: get-ws-byid
        run: |
          WS_OUT=$(python ./addon/get-workspace-byid.py)
          echo "ws_output=$WS_OUT" >> $GITHUB_OUTPUT
        env:
          WORKSPACE_ID: ${{ matrix.workspaces }}

      - name: get-workspace-health
        id: get-ws-health
        run: |
          HEALTH_OUT=$(python ./addon/get-workspace-current-assessment.py)
          echo "health_output=$HEALTH_OUT" >> $GITHUB_OUTPUT
        env:
          WORKSPACE_ID: ${{ matrix.workspaces }}

      - name: health_drift
        id: health_drift
        run: |
          echo "${{ steps.get-ws-health.outputs.health_output }}"
          export DRIFT_OUT=$(echo '${{ steps.get-ws-health.outputs.health_output }}' | jq -r '.data.attributes.drifted' | tojson')
          echo "drift_output=$DRIFT_OUT" >> $GITHUB_OUTPUT

      - name: drifted ## not finished
        if: ${{ steps.health_drift.outputs.drifted == 'true' }} 
        id: drifted
        run: |
          echo "applying ws ${{ matrix.workspaces }}"
        env:
          WORKSPACE_ID: ${{ matrix.workspaces }}

      - name: health-errored ##not finished
        if: ${{ steps.get-ws-health.outputs.health_output.data.attributes.error-message == 'assessment errored' }} 
        id: health-errored
        run: |
          echo "health errors ${{ matrix.workspaces }}"
        env:
          WORKSPACE_ID: ${{ matrix.workspaces }}

      - name: apply-placeholder ##not finished
        id: apply-placeholder 
        run: |
          echo "applying ws ${{ matrix.workspaces }}"